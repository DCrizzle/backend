// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"strconv"
)

type CreateItemInput struct {
	Description *string            `json:"description"`
	Parent      *CreateItemInput   `json:"parent"`
	Children    []*CreateItemInput `json:"children"`
}

type CreateUserInput struct {
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Email     []string `json:"email"`
	Role      Role     `json:"role"`
}

type Item struct {
	ID          string  `json:"id"`
	Description *string `json:"description"`
	Parent      *Item   `json:"parent"`
	Children    []*Item `json:"children"`
}

type Org struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Users []*User `json:"users"`
}

// ReadItemsInput is used to pass all filter query variables to backend database
type ReadItemsInput struct {
	Description *string `json:"description"`
}

type UpdateUserInput struct {
	FirstName *string   `json:"firstName"`
	LastName  *string   `json:"lastName"`
	Email     []*string `json:"email"`
	Role      *Role     `json:"role"`
}

type User struct {
	ID        string   `json:"id"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Email     []string `json:"email"`
	Orgs      []*Org   `json:"orgs"`
	Role      Role     `json:"role"`
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleUserInt Role = "USER_INT"
	RoleUserExt Role = "USER_EXT"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUserInt,
	RoleUserExt,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUserInt, RoleUserExt:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
