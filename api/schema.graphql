type Org {
	id: ID!
	name: String!
	users: [User!]!
}

type User {
	id: ID!
# 	token: String!
	firstName: String!
	lastName: String!
	email: [String!]!
	orgs: [Org!]!
	role: Role!
}

type Item {
	id: ID!
	description: String
	parent: Item
	children: [Item]
# 	# metas: [Meta]
}

# type Meta {
# 	id: ID!
# 	description: String
# 	items: [Item!]!
# }

type Mutation {
	createOrg(name: String!, user: CreateUserInput!): Org
  createUser(orgID: ID!, user: CreateUserInput!): User
	updateUser(orgID: ID!, user: UpdateUserInput!): User
	deleteUser(orgID: ID!, userID: ID!): User
	createItem(orgID: ID!, item: CreateItemInput!): Item
	createItems(items: [CreateItemInput!]!): [Item!]!
}

type Query {
	readOrg(orgID: ID!): Org # NOTE: should this output be required?
	readUser(userID: ID!): User # NOTE: should this output be required?
	listUsers(orgID: ID!): [User!] # NOTE: should this output be required?
	filterItems(name: String!): __Type! # NOTE: __type(name: String!): __Type
	listItems(items: ListItemsInput!): [Item!] # NOTE: should this output be required?
}

input CreateUserInput {
	# token: String
	firstName: String!
	lastName: String!
	email: [String!]!
	role: Role!
}

input UpdateUserInput {
	firstName: String
	lastName: String
	email: [String]
	role: Role
}

input CreateItemInput {
	description: String
	parent: CreateItemInput # NOTE: is this correct input?
	children: [CreateItemInput] # NOTE: is this correct input?
# 	# metas: [Meta]
}

"""ListItemsInput is used to pass all filter query variables to backend database"""
input ListItemsInput {
	description: String # NOTE: this will not be an actual input
}

enum Role {
	ADMIN
	USER_INT
	USER_EXT
}

# outline:
# [ ] add type/field comments/documentation
# - [ ] documentation fields will be exposed in the "item filter" query for ui tooltips
# [ ] NOTE: https://graphql.org/learn/introspection/
# [ ] NOTE: https://graphql-ruby.org/api-doc/1.10.6/GraphQL/Introspection/TypeType
# [ ] NOTE: https://atheros.ai/blog/graphql-introspection-and-introspection-queries
# [ ] add connection (pageination) support for item queries (possibly user queries as well)
