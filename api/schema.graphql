type Org {
	id: ID!
	name: String! @search(by: [term])
	users: [User] @hasInverse(field: orgs)
}

type User {
	id: ID!
	token: String! @search(by: [term])
	firstName: String! @search(by: [term])
	lastName: String! @search(by: [term])
	email: [String]! @search(by: [term])
	orgs: [Org] @hasInverse(field: users)
}

type Item {
	id: ID!
	description: String
	parent: Item # (?)
	children: [Item]
	metas: [Meta]
}

type Meta {
	id: ID!
	description: String
	items: [Item!]!
}

type Mutation {
	createOrg(org: CreateOrgInput!, user: CreateUserInput!): Org
	updateOrg(org: UpdateOrgInput!): Org
	createUser(user: CreateUserInput!): User
	updateUser(user: UpdateUserInput!): User
	createItem(item: CreateItemInput!): Item
	updateItem(item: UpdateItemInput!): Item
	createItems(items: [CreateItemInput!]!): [Item!]!
}

type Query {
	readOrg(orgID: ID!): Org
	readUser(userID: ID!): User
	listUsers(orgID: ID!): [User!]
	listItems(items: ListItemsInput!): [Item!]
}

input CreateOrgInput {
	name: String!
	users: [User!]!
}

input UpdateOrgInput {
	id: ID!
	name: String
	users: [User]
}

input CreateUserInput {
	token: String
	firstName: String!
	lastName: String!
	email: [String!]!
	orgs: [Org!]!
}

input UpdateUserInput {
	id: ID!
	token: String
	firstName: String
	lastName: String
	email: [String]
	orgs: [Org]
}

input CreateItemInput {
	parent: Item
	children: [Item]
	metas: [Meta]
}

input UpdateItemInput {
	id: ID!
	parent: Item
	children: [Item]
	metas: [Meta]
}

input ListItemsInput {
	id: ID
}
