type Consent @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsent {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsent {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsent {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsent {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	owner: OwnerOrg!
	donor: Donor! @hasInverse(field: consents)
	specimen: Specimen @hasInverse(field: consent)
	protocol: Protocol!
	form: ConsentForm! @hasInverse(field: consents)
	consentedDate: DateTime! @search
	retentionPeriod: Int! @search
	destructionDate: DateTime! @search
}

type Donor implements Location @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryDonor {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryDonor {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryDonor {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryDonor {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	owner: OwnerOrg!
	age: Int! @search
	dob: DateTime! @search
	sex: Sex! @search(by: [hash])
	race: Race! @search(by: [hash])
	specimens: [Specimen] @hasInverse(field: donor)
	consents: [Consent] @hasInverse(field: donor)
}

enum Sex {
	MALE
	FEMALE
}

enum Race {
	AMERICAN_INDIAN_OR_ALASKA_NATIVE
	ASIAN
	BLACK_OR_AFRICAN_AMERICAN
	HISPANIC_OR_LATINO
	WHITE
}

interface Form {
	id: ID!
	owner: OwnerOrg!
	title: String! @search(by: [fulltext])
	body: String! @search(by: [fulltext])
}

type ConsentForm implements Form @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsentForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsentForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsentForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryConsentForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	consents: [Consent] @hasInverse(field: form)
}

type ProtocolForm implements Form @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocolForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocolForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocolForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocolForm {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	protocolID: String! @search(by: [hash])
	protocols: [Protocol!]! @hasInverse(field: form)
}

interface Org {
	id: ID!
	name: String! @search(by: [hash])
	users: [User!]! @hasInverse(field: org)
	createdOn: DateTime!
	updatedOn: DateTime!
}

type LabOrg implements Org & Location @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryLabOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryLabOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryLabOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryLabOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	owner: OwnerOrg!
	specimens: [Specimen!]! @hasInverse(field: lab)
	plans: [Plan!]! @hasInverse(field: labs)
}

type OwnerOrg implements Org & Location @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryOwnerOrg( filter: { id: [$orgID] } ) {
				id
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryOwnerOrg( filter: { id: [$orgID] } ) {
				id
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryOwnerOrg( filter: { id: [$orgID] } ) {
				id
			}
		}"""},
	]},
) {
	labs: [LabOrg!]! @hasInverse(field: owner)
	storages: [StorageOrg!]! @hasInverse(field: owner)
}

type StorageOrg implements Org & Location @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryStorageOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_STORAGE\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryStorageOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryStorageOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryStorageOrg {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	owner: OwnerOrg!
	specimens: [Specimen!]! @hasInverse(field: storage)
	plans: [Plan!]! @hasInverse(field: storages)
}

type Plan @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryPlan {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryPlan {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryPlan {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryPlan {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	owner: OwnerOrg!
	name: String! @search(by: [fulltext])
	labs: [LabOrg!]! @hasInverse(field: plans)
	storages: [StorageOrg!]! @hasInverse(field: plans)
	protocol: Protocol! @hasInverse(field: plan)
}

type Protocol implements Location @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocol {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocol {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocol {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryProtocol {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	owner: OwnerOrg!
	name: String! @search(by: [fulltext])
	description: String! @search(by: [fulltext])
	form: ProtocolForm! @hasInverse(field: protocols)
	plan: Plan!
	dobStart: DateTime
	dobEnd: DateTime
	race: [Race]
	sex: [Sex]
	specimens: [Specimen!]! @hasInverse(field: protocol)
}

interface Location {
	street: String! @search(by: [fulltext])
	city: String! @search(by: [fulltext])
	county: String! @search(by: [exact])
	state: String! @search(by: [exact])
	country: String! @search(by: [exact])
	zip: Int! @search
}

type Result @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryResult {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryResult {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryResult {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryResult {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	owner: OwnerOrg!
	notes: String! @search(by: [fulltext])
	test: Test! @hasInverse(field: results)
}

interface Specimen {
	id: ID!
	externalID: String! @search(by: [hash])
	type: SpecimenType! @search(by: [hash])
	collectionDate: DateTime! @search
	donor: Donor! @hasInverse(field: specimens)
	container: ContainerType! @search(by: [hash])
	status: SpecimenStatus! @search(by: [hash])
	destructionDate: DateTime @search
	description: String! @search(by: [fulltext])
	consent: Consent! @hasInverse(field: specimen)
	owner: OwnerOrg!
	lab: LabOrg @hasInverse(field: specimens)
	storage: StorageOrg @hasInverse(field: specimens)
	protocol: Protocol! @hasInverse(field: specimens)
	tests: [Test!]! @hasInverse(field: specimens)
}

enum SpecimenType {
	BLOOD
}

enum ContainerType {
	VIAL
}

enum SpecimenStatus {
	DESTROYED
	EXHAUSTED
	IN_INVENTORY
	IN_TRANSIT
	LOST
	RESERVED
	TRANSFERRED
}

type BloodSpecimen implements Specimen @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryBloodSpecimen {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
			{ rule: "{ $role: { eq: \"USER_STORAGE\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryBloodSpecimen {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
			{ rule: "{ $role: { eq: \"USER_LAB\" } }"},
			{ rule: "{ $role: { eq: \"USER_STORAGE\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryBloodSpecimen {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryBloodSpecimen {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	bloodType: BloodType! @search(by: [hash])
	volume: Float! @search
}

enum BloodType {
	O_NEG
	O_POS
	A_NEG
	A_POS
	B_NEG
	B_POS
	AB_NEG
	AB_POS
}

type Test @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryTest {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryTest {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ or: [
			{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
			{ rule: "{ $role: { eq: \"USER_INTERNAL\" } }"},
		]},
		{ rule: """query($orgID: ID!) {
			queryTest {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryTest {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	id: ID!
	description: String! @search(by: [fulltext])
	owner: OwnerOrg!
	lab: LabOrg!
	specimens: [Specimen!]! @hasInverse(field: tests)
	results: [Result!]! @hasInverse(field: test)
}

type User @auth(
	add: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryUser {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	query: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryUser {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	update: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryUser {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
	delete: { and: [
		{ rule: "{ $isAuthenticated: { eq: \"true\" } }" },
		{ rule: "{ $role: { eq: \"USER_ADMIN\" } }"},
		{ rule: """query($orgID: ID!) {
			queryUser {
				owner( filter: { id: [$orgID] } ) {
					id
				}
			}
		}"""},
	]},
) {
	owner: OwnerOrg!
	email: String! @id
	firstName: String! @search(by: [exact])
	lastName: String! @search(by: [exact])
	role: Role!
	org: Org! @hasInverse(field: users)
	auth0ID: String! @search(by: [exact])
}

enum Role {
	USER_ADMIN
	USER_INTERNAL
	USER_LAB
	USER_STORAGE
}

type Mutation {
	# NOTE: the "authZeroID" is due to a current limitation of Dgraph
	createUser(owner: String!, email: String!, password: String!, firstName: String!, lastName: String!, role: Role!, org: String!): User @custom(http: {
		url: "http://localhost:4080/auth0/users",
		method: "POST",
		body: "{ owner: $owner, email: $email, password: $password, firstName: $firstName, lastName: $lastName, role: $role, org: $org }",
		forwardedHeaders: ["folivora-helper-secret"]
	})
	editUser(authZeroID: String!, role: Role, password: String): User @custom(http: {
		url: "http://localhost:4080/auth0/users",
		method: "PATCH",
		body: "{ authZeroID: $authZeroID, role: $role, password: $password }",
		forwardedHeaders: ["folivora-helper-secret"]
	})
	removeUser(authZeroID: String!): User @custom(http: {
		url: "http://localhost:4080/auth0/users",
		method: "DELETE",
		body: "{ authZeroID: $authZeroID }",
		forwardedHeaders: ["folivora-helper-secret"]
	})
}

# Dgraph.Authorization {"VerificationKey":"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt50KaKOwI1/r9yEojzVW\ncOwGTZbL7sjlUaSI25icLPF8eK1R2dbVaKTdZNtq6LAxFe+NDt2AuU7Vtqzv8GGv\nb2RP5KEgUcJyy75Yw0hT4TP3SrzDB2paCfcKHxQlTQ0pFP0SJMk4YCfq+gDqPnXQ\nCfzw+Zff29zZh5bs1lOxvAIgsu9LtH/zX6f5ASMdHV8EPWdZq6nq8KoOiMcAizDj\nrbm/qcAJP6k+ztbgtN6HdD8v6+7uIKStrYRa0BLXdJAra2uaLI4z2H22RHuzhkIu\nytxpYnxDlYTXzroSiRs/vs/dyHixT8smbEQmLoPTpflnoEZcNDXkhf0v9yVtG6NV\n1QIDAQAB\n-----END PUBLIC KEY-----","Header":"X-Auth0-Token","Namespace":"https://folivora.io/jwt/claims","Algo":"RS256","Audience":["eUNA8USgnts6liidRayqWGDPXCZnPg33"]}
