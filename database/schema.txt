outline:
[x] "specimen" will be interface
- [x] implementations will be different categories of specimen
- [x] query on specific categories (implementations)
- - [x] e.g. "... on BloodSpecimen { }"
[x] "form" will be interface
- [x] e.g. "ConsentForm"
[x] "consent" type will be a relationship ("connection"?)
- [x] contains:
- - [x] donor
- - [x] date
- - [x] consent form
- - [x] etc
- [x] represents specific agreement made (an "action")
- [ ] "@hasInverse" will primarily be used for Specimen type relationships
- [ ] include an "attribute mapping" type on the Lab entities (?)
- - [ ] possibly to show individual Lab header/field names for attributes within the "root" type
- - [ ] this would be added/updated as Lab nodes are added/updated
- [x] add "orgID" string fields to all types to facilitate multi-tenancy
[ ] dgraph-generated notes
- [ ] "get*" -> accepts ID-specified fields
- - [ ] e.g. "ID!" or "@id" directive
- [ ] "query*"
- - [ ] "filter" field contains fields tagged with "@search" directive
- [ ] dgraph operations
- - [ ] "add", "delete", "get", "query", "update"
- [ ] update relationships using "set"/"remove" keywords in queries
- [ ] searching: https://dgraph.io/docs/query-language/#indexing

NOTE: these fields will be added to the User type when the following limitations are addressed in Dgraph:
- The keys in the body can only contain [a-zA-Z], things like app_metadata which have _ (underscore) in their name, won’t work for now.
- Hardcoded values are not supported at present (e.g. \"Username-Password-Authentication\")
- Non-scalar variables are not supported in the body at present. So, $role (enum) or $owner (ID) won’t work for now.

createAuth0User: User @custom(http: {
	url: "https://folivora.auth0.com/api/v2/users",
	method: "POST",
	body: "{ email: $email, app_metadata: { role: $role, orgID: $owner }, given_name: $firstName, family_name: $lastName, connection: \"Username-Password-Authentication\" }"
	forwardedHeaders: ["Authorization"]
})
updateAuth0User: User @custom(http: {
	url: "https://folivora.auth0.com/api/v2/users/$user_id",
	method: "PATCH",
	body: "{ email: $email, app_metadata: { role: $role, orgID: $owner }, given_name: $firstName, family_name: $lastName }",
	forwardedHeaders: ["Authorization"]
})
deleteAuth0User: User @custom(http: {
	url: "https://folivora.auth0.com/api/v2/users/$user_id",
	method: "DELETE",
	forwardedHeaders: ["Authorization"]
})
