type Consent { # this represents a single "consent action" - an individual agreeing
	id: ID!
	text: String! # a separate type may be needed to represent the "type" of consent agreed to
	donor: Donor!
	plan: Plan!
	protocol: Protocol!
	specimens: [Specimen!]! # not needed on "create"
	specimenTypes: [SpecimenType!]!
	storage: Storage! # maybe multiple storages (?)
	lab: Lab! # maybe multiple labs (?)
	test: [Test!]!
	location: [Location!]!
}

type Demographic {
	id: ID!
	race: String!
	age: String!
	sex: String!
	donors: [Donor!]!
	protocols: [Protocol!]!
	specimens: [Specimen!]!
}

type Donor {
	id: ID!
	temp: String! # TEMP
	specimens: [Specimen!]! # not needed on "create"
	demographic: Demographic! # should this be multiple in the event they donate at different ages (?)
	consent: [Consent!]! # probably multiple
}

type Lab {
	id: ID!
	name: String!
	tests: [Test!]!
	location: Location!
	users: [User!]!
	consent: [Consent!]!
	plan: [Plan!]!
	specimens: [Specimen!]!
}

type Location { # should this be changed to "address" (?)
	id: ID!
	lat: Float!
	lon: Float!
	# probably adding address as well (e.g. street)
	# most of these connections are mutually exclusive (?)
	consent: [Consent!]!
	plans: [Plan!]!
	protocols: [Protocol!]!
	specimens: [Specimen!]! # should this be included (?)
	storages: [Storage!]!
	labs: [Lab!]!
}

type Org {
	id: ID!
	name: String!
	specimens: [Specimen!]! # continually added to the org over time
	roles: [Role!]!
	users: [User!]! # all "internal" + "external" users w/ different roles (e.g. admin, scientist)
}

# plan vs protocol fields need to be sorted out - should there be any overlap (?)
type Plan {
	id: ID!
	title: String!
	protocol: Protocol!
	specimenTypes: [SpecimenType!]!
	storages: [Storage!]!
	labs: [Lab!]!
	tests: [Test!]!
	locations: [Location!]!
	consents: [Consent!]!
}

type Protocol {
	id: ID!
	title: String!
	specimens: [Specimen!]! # collected after the process (after "create")
	specimenTypes: [SpecimenType!]! # defined before the process (on "create")
	results: [Result!]!
	tests: [Test!]!
	locations: [Location!]! # address (?)
	consents: [Consent!]!
	demographics: [Demographic!]!
}

type Result {
	id: ID!
	datetime: String! # string necessary due to conflict between gqlgen + dgraph (some other workaround may be possible)
	test: Test!
	protocol: Protocol!
}

type Role {
	id: ID!
	name: String!
	permissions: [String!]! # e.g. "user:create"
	org: Org!
	users: [User!]!
}

type Specimen {
	id: ID!
	specimenType: SpecimenType!
	storages: [Storage!]! # chronological ordering (?)
	labs: [Lab!]! # should there be more than one (?)
	tests: [Test!]!
	location: Location! # current location (?)
	temp: String!
}

type SpecimenType {
	id: ID!
	specimen: [Specimen!]!
	protocols: [Protocol!]!
	plans: [Plan!]!
	consents: [Consent!]!
	temp: String!
}

type Storage {
	id: ID!
	name: String!
	specimens: [Specimen!]!
	consent: [Consent!]!
	users: [User!]! # third-party users added to the app by admins
	location: Location! # single address for storage
}

type Test {
	id: ID!
	name: String!
	# should any of these be singular - likely all singular/multiple (?)
	consents: [Consent!]!
	plans: [Plan!]!
	protocols: [Protocol!]!
	specimens: [Specimen!]!
	result: [Result!]!
}

# will also included a "type" field/type ("ui"/"api") - probably an enum root type
type User {
	id: ID!
	firstName: String!
	lastName: String!
	email: String!
	org: Org!
	role: Role!
	storage: Storage! # not guaranteed
	lab: Lab! # not guaranteed
}
