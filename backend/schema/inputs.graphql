# note: these names may change to better match dgraph

# update consent is just id + specimen(s)
input CreateConsent {
	text: String! # a separate type may be needed to represent the "type" of consent agreed to
	# donor: Donor!
	# plan: Plan!
	# protocol: Protocol!
	# specimens: [Specimen!]! # not needed on "create"
	# specimenTypes: [SpecimenType!]!
	# storage: Storage! # maybe multiple storages (?)
	# lab: Lab! # maybe multiple labs (?)
	# test: [Test!]!
	# location: [Location!]!
}

# update demographic is just id + protocol(s)
input CreateDemographic {
	race: String!
	age: String!
	sex: String!
	# donors: [Donor!]!
	# protocols: [Protocol!]!
	# specimens: [Specimen!]!
}

input CreateDonor {
	temp: String!
	# demographic: Demographic!
	# consent: [Consent!]! # probably multiple
}

input UpdateDonor {
	id: ID!
	# specimens: [Specimen!] # optional
	# consent: [Consent!] # optional
}

input CreateLab {
	name: String! # required
	# tests: [Test!]
	# location: Location! # required
	# users: [User!]
	# consent: [Consent!]
	# plan: [Plan!]
	# specimens: [Specimen!]
}

input UpdateLab { # probably used in different methods (e.g. AddSpecimen, RemoveUser)
	id: ID!
	name: String
	# tests: [Test!]
	# location: Location
	# users: [User!]
	# consent: [Consent!]
	# plan: [Plan!]
	# specimens: [Specimen!]
}

# skipping location for now

input CreateOrg {
	name: String!
	# users: [User!]! # all "internal" + "external" users w/ different roles (e.g. admin, scientist)
}

input UpdateOrg { # used in different methods (e.g. AddSpecimen, RemoveRole, ChangeName)
	id: ID!
	name: String
	# specimens: [Specimen!] # continually added to the org over time
	# roles: [Role!]
	# users: [User!] # all "internal" + "external" users w/ different roles (e.g. admin, scientist)
}

input CreatePlan {
	title: String!
	# protocol: Protocol!
	# specimenTypes: [SpecimenType!]!
	# storages: [Storage!]!
	# labs: [Lab!]!
	# tests: [Test!]!
	# locations: [Location!]!
	# consents: [Consent!]!
}

input CreateProtocol {
	title: String!
	# specimenTypes: [SpecimenType!]! # defined before the process (on "create")
	# tests: [Test!]!
	# locations: [Location!]! # address (?)
	# consents: [Consent!]! # this should probably be "consent type"
	# demographics: [Demographic!]!
}

input UpdateProtocol {
	id: ID!
	title: String
	# specimens: [Specimen!] # collected after the process (after "create")
	# results: [Result!]
}

# no "update" provided - essentially "immutable"
input CreateResult {
	datetime: String! # string necessary due to conflict between gqlgen + dgraph (some other workaround may be possible)
	# test: Test!
	# protocol: Protocol!
}

input CreateRole {
	name: String!
	permissions: [String!]! # e.g. "user:create"
	# org: Org!
}

input UpdateRole {
	id: ID!
	name: String!
	permissions: [String!] # e.g. "user:create"
	# users: [User!]
}

input CreateSpecimen {
	temp: String!
	# specimenType: SpecimenType!
	# labs: [Lab!]! # should there be more than one (?)
	# location: Location! # current location (?)
}

input UpdateSpecimen {
	id: ID!
	# storages: [Storage!] # chronological ordering (?)
	# labs: [Lab!] # should there be more than one (?)
	# tests: [Test!]
	# location: Location # current location (?)
}

# "immutable" and no "update" method provided
input CreateSpecimenType {
	temp: String!
	# protocols: [Protocol!]!
	# plans: [Plan!]!
	# consents: [Consent!]!
}

input CreateStorage {
	name: String!
	# location: Location! # single address for storage
}

input UpdateStorage {
	id: ID!
	name: String
	# specimens: [Specimen!]
	# consent: [Consent!]
	# users: [User!] # third-party users added to the app by admins
	# location: Location # single address for storage
}

# an "update" will be provided after decisions are made on these fields
input CreateTest {
	name: String!
	# should any of these be singular - likely all singular/multiple (?)
	# consents: [Consent!]!
	# plans: [Plan!]!
	# protocols: [Protocol!]!
	# specimens: [Specimen!]!
	# result: [Result!]!
}

input CreateUser {
	firstName: String!
	lastName: String!
	email: String!
	# org: Org!
	# role: Role!
	# storage: Storage # not guaranteed
	# lab: Lab # not guaranteed
}

input UpdateUser {
	id: ID!
	firstName: String
	lastName: String
	email: String
	# org: Org
	# role: Role
	# storage: Storage # not guaranteed
	# lab: Lab # not guaranteed
}
